# frozen_string_literal: true

module Spior
  module Tor
    # Generate a config file (torrc) for Spior
    class Config
      # ==== Attributes
      #
      # * +filename+ - A reference to a tempfile like filename=Tempfile.new('foo')
      #
      def initialize(filename)
        @filename = filename
        @content = ['# Generated by Spior, don\'t edit.', 'RunAsDaemon 1',
                    'ClientOnly 1', 'SocksPort 0']
      end

      # Generate a `torrc` compatible file for Spior
      # Use value from Spior::CONFIG
      def generate
        generate_content
        File.write @filename.path, @content.join("\n") + "\n"
        Msg.p 'Generating Tor config...'
      end

      protected

      def generate_content
        adding 'AutomapHostsOnResolve 1'
        adding "DNSPort #{CONFIG.dns_listen_address}:#{CONFIG.dns_port}"
        adding "VirtualAddrNetworkIpv4 #{CONFIG.virt_addr}"
        adding "TransPort #{CONFIG.trans_port} IsolateClientAddr
               IsolateClientProtocol IsolateDestAddr IsolateDestPort"
      end

      private

      def search(option_name)
        File.open('/etc/tor/torrc') do |f|
          f.each do |line|
            return Regexp.last_match(1) if line.match(/#{option_name} ([a-z0-9]*)/i)
          end
        end
        false
      end

      def adding(option)
        o = option.split(' ')
        all = o[1..o.length].join(' ')
        if !search(o[0])
          @content << "#{o[0]} #{all}"
        end
      end
    end
  end
end
