require 'pathname'
require 'nomansland'
require 'tty-which'
require_relative 'msg'
require_relative 'install'
require_relative 'copy'
require_relative 'helpers'

module Spior
  class Tor
    attr_accessor :dns, :uid, :trans_port, :virt_addr

    def initialize
      @systemctl = Helpers::Exec.new("systemctl")
      check_deps
      @dns = search_dns
      @uid = search_uid
      @trans_port = search_trans_port
      @virt_addr = search_virt_addr
    end

    private 

    def check_deps
      Spior::Install::check_deps
      Spior::Copy::config_files
      add_resolv
      add_torrc
      verify_service
    end

    def add_resolv
      string = "nameserver 127.0.0.1"
      Spior::Copy::backup("/etc/resolv.conf", /nameserver 127.0.0.1$/)
      new_file = Helpers::NewFile.new(string, "resolv.conf", "/etc")
      new_file.add
      new_file.perm("root", "644")
    end

    def add_torrc
      user = ""
      pid = ""
      dir = "DataDirectory /var/lib/tor/data"
      case Nomansland::distro?
      when :gentoo
        user = "User tor"
        pid = "PIDFile /run/tor/tor.pid"
      end
      string = <<EOF
# Generated by Spior
#{user}
#{pid}
#{dir}
GeoIPExcludeUnknown 1
DNSPort 127.0.0.1:9061
AutomapHostsOnResolve 1
AutomapHostsSuffixes .exit,.onion
SocksPort 9050
VirtualAddrNetworkIPv4 10.192.0.0/10
TransPort 9040 IsolateClientAddr IsolateClientProtocol IsolateDestAddr IsolateDestPort
TestSocks 1
MaxCircuitDirtiness 600
EOF
      re = /# Generated by Spior/
      Spior::Copy::backup("/etc/tor/torrc", re)
      new_file = Helpers::NewFile.new(string, "torrc", "/etc/tor")
      new_file.add
      new_file.perm("root", "644")
    end

    def search_dns
      9061
    end

    def search_uid
      case Nomansland::distro?
        when :debian
          `id -u debian-tor`.chomp
        when :ubuntu
          `id -u debian-tor`.chomp
        else
          `id -u tor`.chomp
      end
    end

    def search_trans_port
      9040
    end

    def search_virt_addr
      "10.192.0.0/10"
    end

    def verify_service
      if TTY::Which.exist?('systemctl')
        state = `systemctl is-active tor`.chomp
        if state == 'active'
          @systemctl.run('restart tor')
        else
          @systemctl.run('start tor')
        end
      else
        Msg.for_no_systemd
      end
    end
  end
end
